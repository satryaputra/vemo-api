// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Vemo.Infrastructure.Persistence;

#nullable disable

namespace Vemo.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231216063248_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Vemo.Domain.Entities.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Read")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Users.AuthInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Otp")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("OtpExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AuthInfos");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7575941d-9ba1-4588-89fb-72a430eabab2"),
                            CreatedAt = new DateTime(2023, 12, 16, 6, 32, 47, 934, DateTimeKind.Utc).AddTicks(2922),
                            Email = "admin@vemo.com",
                            Name = "admin",
                            Password = "BKqGre1UnWBqEZqMDmmIU5b83HTCrR2hfXR2avoAcZH8w0NB",
                            Role = "admin"
                        },
                        new
                        {
                            Id = new Guid("53c96d08-6e9d-4350-b3e9-21e1008b89c5"),
                            CreatedAt = new DateTime(2023, 12, 16, 6, 32, 47, 940, DateTimeKind.Utc).AddTicks(3390),
                            Email = "customer@vemo.com",
                            Name = "customer",
                            Password = "TUcAZcC1KOwJaVgCWFsc4AXJVcMEHCaoBbWcTYPd2SAZgB8n",
                            Role = "customer"
                        });
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.ConditionPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastMaintenance")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("VehicleId");

                    b.ToTable("ConditionParts");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.MaintenancePart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaintenanceFinalPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("MaintenanceServiceFinalPrice")
                        .HasColumnType("double precision");

                    b.Property<Guid>("MaintenanceVehicleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceVehicleId");

                    b.HasIndex("PartId");

                    b.ToTable("MaintenanceParts");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.MaintenanceVehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("MaintenanceVehicles");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AgeInMonth")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("MaintenancePrice")
                        .HasColumnType("real");

                    b.Property<float>("MaintenanceServicePrice")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VehicleType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Parts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6aeefee1-fb66-48a2-b2e0-88089ecab98e"),
                            AgeInMonth = 4,
                            CreatedAt = new DateTime(2023, 12, 16, 6, 32, 47, 940, DateTimeKind.Utc).AddTicks(4058),
                            MaintenancePrice = 50000f,
                            MaintenanceServicePrice = 10000f,
                            Name = "Oli"
                        },
                        new
                        {
                            Id = new Guid("393097ba-8737-40fe-862a-d842a7e99962"),
                            AgeInMonth = 10,
                            CreatedAt = new DateTime(2023, 12, 16, 6, 32, 47, 940, DateTimeKind.Utc).AddTicks(4062),
                            MaintenancePrice = 30000f,
                            MaintenanceServicePrice = 20000f,
                            Name = "Radiator"
                        },
                        new
                        {
                            Id = new Guid("73b82984-c5f0-4bb3-a404-13cb1383c6bc"),
                            AgeInMonth = 6,
                            CreatedAt = new DateTime(2023, 12, 16, 6, 32, 47, 940, DateTimeKind.Utc).AddTicks(4081),
                            MaintenancePrice = 25000f,
                            MaintenanceServicePrice = 5000f,
                            Name = "Busi"
                        },
                        new
                        {
                            Id = new Guid("5107e048-f2a9-4cee-8082-bbb386ceb076"),
                            AgeInMonth = 5,
                            CreatedAt = new DateTime(2023, 12, 16, 6, 32, 47, 940, DateTimeKind.Utc).AddTicks(4083),
                            MaintenancePrice = 40000f,
                            MaintenanceServicePrice = 15000f,
                            Name = "Rem"
                        },
                        new
                        {
                            Id = new Guid("e272f915-f101-46fd-9c5e-32b5dd39758e"),
                            AgeInMonth = 24,
                            CreatedAt = new DateTime(2023, 12, 16, 6, 32, 47, 940, DateTimeKind.Utc).AddTicks(4092),
                            MaintenancePrice = 300000f,
                            MaintenanceServicePrice = 25000f,
                            Name = "Ban"
                        },
                        new
                        {
                            Id = new Guid("f6b6b79b-5452-4a46-9349-75e33bf1e837"),
                            AgeInMonth = 3,
                            CreatedAt = new DateTime(2023, 12, 16, 6, 32, 47, 940, DateTimeKind.Utc).AddTicks(4095),
                            MaintenancePrice = 20000f,
                            MaintenanceServicePrice = 10000f,
                            Name = "Aki"
                        },
                        new
                        {
                            Id = new Guid("b9ff0e80-aa1f-43aa-a4e2-3d6022e57bde"),
                            AgeInMonth = 8,
                            CreatedAt = new DateTime(2023, 12, 16, 6, 32, 47, 940, DateTimeKind.Utc).AddTicks(4103),
                            MaintenancePrice = 60000f,
                            MaintenanceServicePrice = 20000f,
                            Name = "V-Belt",
                            VehicleType = "matic"
                        },
                        new
                        {
                            Id = new Guid("0de60c35-d190-48ca-bddd-e8c7e50aee97"),
                            AgeInMonth = 12,
                            CreatedAt = new DateTime(2023, 12, 16, 6, 32, 47, 940, DateTimeKind.Utc).AddTicks(4106),
                            MaintenancePrice = 100000f,
                            MaintenanceServicePrice = 20000f,
                            Name = "CVT",
                            VehicleType = "matic"
                        },
                        new
                        {
                            Id = new Guid("706ab5aa-ff07-4311-854d-5e73ad2c8371"),
                            AgeInMonth = 8,
                            CreatedAt = new DateTime(2023, 12, 16, 6, 32, 47, 940, DateTimeKind.Utc).AddTicks(4108),
                            MaintenancePrice = 100000f,
                            MaintenanceServicePrice = 20000f,
                            Name = "Rantai dan Gear",
                            VehicleType = "manual"
                        },
                        new
                        {
                            Id = new Guid("a3e3e2a6-f954-4ac9-9461-b49a0feceb1f"),
                            AgeInMonth = 9,
                            CreatedAt = new DateTime(2023, 12, 16, 6, 32, 47, 940, DateTimeKind.Utc).AddTicks(4110),
                            MaintenancePrice = 100000f,
                            MaintenanceServicePrice = 20000f,
                            Name = "Kampas Kopling",
                            VehicleType = "manual"
                        });
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchasingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Notifications.Notification", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Users.AuthInfo", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Users.User", "User")
                        .WithOne("UserAuthInfo")
                        .HasForeignKey("Vemo.Domain.Entities.Users.AuthInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.ConditionPart", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Vehicles.Part", "Part")
                        .WithMany("ConditionParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vemo.Domain.Entities.Vehicles.Vehicle", "Vehicle")
                        .WithMany("ConditionParts")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.MaintenancePart", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Vehicles.MaintenanceVehicle", "MaintenanceVehicle")
                        .WithMany("MaintenanceParts")
                        .HasForeignKey("MaintenanceVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vemo.Domain.Entities.Vehicles.Part", "Part")
                        .WithMany("MaintenanceParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenanceVehicle");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.MaintenanceVehicle", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Vehicles.Vehicle", "Vehicle")
                        .WithMany("MaintenanceVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.Vehicle", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Users.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("UserAuthInfo");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.MaintenanceVehicle", b =>
                {
                    b.Navigation("MaintenanceParts");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.Part", b =>
                {
                    b.Navigation("ConditionParts");

                    b.Navigation("MaintenanceParts");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.Vehicle", b =>
                {
                    b.Navigation("ConditionParts");

                    b.Navigation("MaintenanceVehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
