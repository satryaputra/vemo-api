// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Vemo.Infrastructure.Persistence;

#nullable disable

namespace Vemo.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240111082519_InitialDb")]
    partial class InitialDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Vemo.Domain.Entities.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Read")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Users.AuthInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Otp")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("OtpExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("AuthInfos");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Photo")
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3fe05da8-2812-47cf-b530-a0acd9f701e4"),
                            CreatedAt = new DateTime(2024, 1, 11, 8, 25, 19, 222, DateTimeKind.Utc).AddTicks(7806),
                            Email = "admin@vemo.com",
                            Name = "admin",
                            Password = "BlTosvmRb2mqvtWxKCFKSmNo/Zqr9RZc9z7PIbDO17rwnWbg",
                            Role = "admin"
                        },
                        new
                        {
                            Id = new Guid("7e0e1819-9f03-4b3b-9e01-2e33bb763adc"),
                            CreatedAt = new DateTime(2024, 1, 11, 8, 25, 19, 226, DateTimeKind.Utc).AddTicks(7288),
                            Email = "customer@vemo.com",
                            Name = "customer",
                            Password = "df42AH/l7MHQatP3zh7iL6SHUjpgbkTz4rLxy8MRCIwva8xv",
                            Role = "customer"
                        });
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.ConditionPart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastMaintenance")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PartId");

                    b.HasIndex("VehicleId");

                    b.ToTable("ConditionParts");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.MaintenancePart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("MaintenanceFinalPrice")
                        .HasColumnType("double precision");

                    b.Property<double>("MaintenanceServiceFinalPrice")
                        .HasColumnType("double precision");

                    b.Property<Guid>("MaintenanceVehicleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PartId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("MaintenanceVehicleId");

                    b.HasIndex("PartId");

                    b.ToTable("MaintenanceParts");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.MaintenanceVehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("MaintenanceVehicles");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.Part", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AgeInMonth")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("MaintenancePrice")
                        .HasColumnType("real");

                    b.Property<float>("MaintenanceServicePrice")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VehicleType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Parts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4849f242-ac10-4985-8aca-e7e3bf3a8033"),
                            AgeInMonth = 4,
                            CreatedAt = new DateTime(2024, 1, 11, 8, 25, 19, 226, DateTimeKind.Utc).AddTicks(7868),
                            MaintenancePrice = 50000f,
                            MaintenanceServicePrice = 10000f,
                            Name = "Oli"
                        },
                        new
                        {
                            Id = new Guid("9325fd9f-8232-4c5e-9bfb-b4db96b009c3"),
                            AgeInMonth = 10,
                            CreatedAt = new DateTime(2024, 1, 11, 8, 25, 19, 226, DateTimeKind.Utc).AddTicks(7884),
                            MaintenancePrice = 30000f,
                            MaintenanceServicePrice = 20000f,
                            Name = "Radiator"
                        },
                        new
                        {
                            Id = new Guid("55b4f572-cc8f-4f2a-a508-a662df04555d"),
                            AgeInMonth = 6,
                            CreatedAt = new DateTime(2024, 1, 11, 8, 25, 19, 226, DateTimeKind.Utc).AddTicks(7887),
                            MaintenancePrice = 25000f,
                            MaintenanceServicePrice = 5000f,
                            Name = "Busi"
                        },
                        new
                        {
                            Id = new Guid("ed362008-5f8e-48fe-aee8-03ed65b39b18"),
                            AgeInMonth = 5,
                            CreatedAt = new DateTime(2024, 1, 11, 8, 25, 19, 226, DateTimeKind.Utc).AddTicks(7890),
                            MaintenancePrice = 40000f,
                            MaintenanceServicePrice = 15000f,
                            Name = "Rem"
                        },
                        new
                        {
                            Id = new Guid("3de6619e-0863-42cd-a920-820fd20fc1ba"),
                            AgeInMonth = 24,
                            CreatedAt = new DateTime(2024, 1, 11, 8, 25, 19, 226, DateTimeKind.Utc).AddTicks(7898),
                            MaintenancePrice = 300000f,
                            MaintenanceServicePrice = 25000f,
                            Name = "Ban"
                        },
                        new
                        {
                            Id = new Guid("63533620-f26f-4d49-b8d1-587fcc298290"),
                            AgeInMonth = 3,
                            CreatedAt = new DateTime(2024, 1, 11, 8, 25, 19, 226, DateTimeKind.Utc).AddTicks(7906),
                            MaintenancePrice = 20000f,
                            MaintenanceServicePrice = 10000f,
                            Name = "Aki"
                        },
                        new
                        {
                            Id = new Guid("e7d16d78-c120-4023-b86d-f9473f598ab4"),
                            AgeInMonth = 8,
                            CreatedAt = new DateTime(2024, 1, 11, 8, 25, 19, 226, DateTimeKind.Utc).AddTicks(7909),
                            MaintenancePrice = 60000f,
                            MaintenanceServicePrice = 20000f,
                            Name = "V-Belt",
                            VehicleType = "matic"
                        },
                        new
                        {
                            Id = new Guid("5af90db0-fb10-494a-acfd-12e6a7d8f7a4"),
                            AgeInMonth = 12,
                            CreatedAt = new DateTime(2024, 1, 11, 8, 25, 19, 226, DateTimeKind.Utc).AddTicks(7912),
                            MaintenancePrice = 100000f,
                            MaintenanceServicePrice = 20000f,
                            Name = "CVT",
                            VehicleType = "matic"
                        },
                        new
                        {
                            Id = new Guid("2b1b9460-de49-432a-a138-e72ff47ceda9"),
                            AgeInMonth = 8,
                            CreatedAt = new DateTime(2024, 1, 11, 8, 25, 19, 226, DateTimeKind.Utc).AddTicks(7915),
                            MaintenancePrice = 100000f,
                            MaintenanceServicePrice = 20000f,
                            Name = "Rantai dan Gear",
                            VehicleType = "manual"
                        },
                        new
                        {
                            Id = new Guid("a61840b5-fbad-4081-805a-badaa8e54f4a"),
                            AgeInMonth = 9,
                            CreatedAt = new DateTime(2024, 1, 11, 8, 25, 19, 226, DateTimeKind.Utc).AddTicks(7921),
                            MaintenancePrice = 100000f,
                            MaintenanceServicePrice = 20000f,
                            Name = "Kampas Kopling",
                            VehicleType = "manual"
                        });
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MaintenanceStatus")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchasingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Notifications.Notification", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Users.AuthInfo", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Users.User", "User")
                        .WithOne("UserAuthInfo")
                        .HasForeignKey("Vemo.Domain.Entities.Users.AuthInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.ConditionPart", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Vehicles.Part", "Part")
                        .WithMany("ConditionParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vemo.Domain.Entities.Vehicles.Vehicle", "Vehicle")
                        .WithMany("ConditionParts")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.MaintenancePart", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Vehicles.MaintenanceVehicle", "MaintenanceVehicle")
                        .WithMany("MaintenanceParts")
                        .HasForeignKey("MaintenanceVehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vemo.Domain.Entities.Vehicles.Part", "Part")
                        .WithMany("MaintenanceParts")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaintenanceVehicle");

                    b.Navigation("Part");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.MaintenanceVehicle", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Vehicles.Vehicle", "Vehicle")
                        .WithMany("MaintenanceVehicles")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.Vehicle", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Users.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("UserAuthInfo");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.MaintenanceVehicle", b =>
                {
                    b.Navigation("MaintenanceParts");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.Part", b =>
                {
                    b.Navigation("ConditionParts");

                    b.Navigation("MaintenanceParts");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.Vehicle", b =>
                {
                    b.Navigation("ConditionParts");

                    b.Navigation("MaintenanceVehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
