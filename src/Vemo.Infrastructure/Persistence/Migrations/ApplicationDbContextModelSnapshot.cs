// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Vemo.Infrastructure.Persistence;

#nullable disable

namespace Vemo.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Vemo.Domain.Entities.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Read")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b7390ca0-27b4-48b9-91ac-25f0216d4365"),
                            CreatedAt = new DateTime(2023, 12, 14, 6, 17, 13, 607, DateTimeKind.Utc).AddTicks(5249),
                            Email = "admin@vemo.com",
                            Name = "admin",
                            Password = "GTqUiGEV27X1HrpJ5aCIUmp5I35pbskPBTB3P0f2vgd+ViSr",
                            Role = "admin"
                        },
                        new
                        {
                            Id = new Guid("ab21666f-501c-4fa1-9cdb-1e28a1b11538"),
                            CreatedAt = new DateTime(2023, 12, 14, 6, 17, 13, 610, DateTimeKind.Utc).AddTicks(9280),
                            Email = "customer@vemo.com",
                            Name = "customer",
                            Password = "y8p7CnUadBvgyIZc3O4CriLVWxdSrPH4s3vYZu7XMF7K+J9n",
                            Role = "customer"
                        });
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Users.UserAuthInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Otp")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("OtpExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserAuthInfos");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchasingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.VehiclePart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AgeInMonth")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("MaintenancePrice")
                        .HasColumnType("real");

                    b.Property<float>("MaintenanceServicePrice")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VehicleType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VehicleParts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f857afd0-01e8-4492-9435-d9d3c3cd7459"),
                            AgeInMonth = 4,
                            CreatedAt = new DateTime(2023, 12, 14, 6, 17, 13, 610, DateTimeKind.Utc).AddTicks(9526),
                            MaintenancePrice = 50000f,
                            MaintenanceServicePrice = 10000f,
                            Name = "Oli"
                        },
                        new
                        {
                            Id = new Guid("a013a650-656e-4a63-b9fe-18f98af709b4"),
                            AgeInMonth = 10,
                            CreatedAt = new DateTime(2023, 12, 14, 6, 17, 13, 610, DateTimeKind.Utc).AddTicks(9528),
                            MaintenancePrice = 30000f,
                            MaintenanceServicePrice = 20000f,
                            Name = "Radiator"
                        },
                        new
                        {
                            Id = new Guid("3877491e-bfbb-4fa2-972b-316a05ef138e"),
                            AgeInMonth = 6,
                            CreatedAt = new DateTime(2023, 12, 14, 6, 17, 13, 610, DateTimeKind.Utc).AddTicks(9530),
                            MaintenancePrice = 25000f,
                            MaintenanceServicePrice = 5000f,
                            Name = "Busi"
                        },
                        new
                        {
                            Id = new Guid("c8038437-b554-4cd2-9b36-13502d97d20a"),
                            AgeInMonth = 5,
                            CreatedAt = new DateTime(2023, 12, 14, 6, 17, 13, 610, DateTimeKind.Utc).AddTicks(9532),
                            MaintenancePrice = 40000f,
                            MaintenanceServicePrice = 15000f,
                            Name = "Rem"
                        },
                        new
                        {
                            Id = new Guid("6818748e-8a6f-4608-b837-9c125ff7f5bb"),
                            AgeInMonth = 24,
                            CreatedAt = new DateTime(2023, 12, 14, 6, 17, 13, 610, DateTimeKind.Utc).AddTicks(9536),
                            MaintenancePrice = 300000f,
                            MaintenanceServicePrice = 25000f,
                            Name = "Ban"
                        },
                        new
                        {
                            Id = new Guid("dd4cd404-ea0c-4cf0-9688-83032c4925da"),
                            AgeInMonth = 3,
                            CreatedAt = new DateTime(2023, 12, 14, 6, 17, 13, 610, DateTimeKind.Utc).AddTicks(9539),
                            MaintenancePrice = 20000f,
                            MaintenanceServicePrice = 10000f,
                            Name = "Aki"
                        },
                        new
                        {
                            Id = new Guid("36b8d8bf-d29d-4b0b-b01c-669b2998f1c4"),
                            AgeInMonth = 8,
                            CreatedAt = new DateTime(2023, 12, 14, 6, 17, 13, 610, DateTimeKind.Utc).AddTicks(9541),
                            MaintenancePrice = 60000f,
                            MaintenanceServicePrice = 20000f,
                            Name = "V-Belt",
                            VehicleType = "matic"
                        },
                        new
                        {
                            Id = new Guid("f0f8e9d4-2e24-43ca-bf8c-f859f6d2f554"),
                            AgeInMonth = 12,
                            CreatedAt = new DateTime(2023, 12, 14, 6, 17, 13, 610, DateTimeKind.Utc).AddTicks(9543),
                            MaintenancePrice = 100000f,
                            MaintenanceServicePrice = 20000f,
                            Name = "CVT",
                            VehicleType = "matic"
                        },
                        new
                        {
                            Id = new Guid("a28c75de-0d0b-43a5-96ec-1d7fb0006733"),
                            AgeInMonth = 8,
                            CreatedAt = new DateTime(2023, 12, 14, 6, 17, 13, 610, DateTimeKind.Utc).AddTicks(9547),
                            MaintenancePrice = 100000f,
                            MaintenanceServicePrice = 20000f,
                            Name = "Rantai dan Gear",
                            VehicleType = "manual"
                        },
                        new
                        {
                            Id = new Guid("ac250928-641a-4e14-acc3-07e678e45a4f"),
                            AgeInMonth = 9,
                            CreatedAt = new DateTime(2023, 12, 14, 6, 17, 13, 610, DateTimeKind.Utc).AddTicks(9549),
                            MaintenancePrice = 100000f,
                            MaintenanceServicePrice = 20000f,
                            Name = "Kampas Kopling",
                            VehicleType = "manual"
                        });
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.VehiclePartCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastMaintenance")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("NextMaintenance")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehiclePartId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehiclePartId");

                    b.ToTable("VehiclePartConditions");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.VehiclePartMaintenanceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("MaintenanceFinalPrice")
                        .HasColumnType("real");

                    b.Property<float>("MaintenanceServiceFinalPrice")
                        .HasColumnType("real");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehiclePartId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehiclePartId");

                    b.ToTable("VehiclePartMaintenanceHistories");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Notifications.Notification", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Users.UserAuthInfo", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Users.User", "User")
                        .WithOne("UserAuthInfo")
                        .HasForeignKey("Vemo.Domain.Entities.Users.UserAuthInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.Vehicle", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Users.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.VehiclePartCondition", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Vehicles.Vehicle", "Vehicle")
                        .WithMany("VehiclePartConditions")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vemo.Domain.Entities.Vehicles.VehiclePart", "VehiclePart")
                        .WithMany("VehiclePartConditions")
                        .HasForeignKey("VehiclePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");

                    b.Navigation("VehiclePart");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.VehiclePartMaintenanceHistory", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Vehicles.Vehicle", "Vehicle")
                        .WithMany("VehiclePartMaintenanceHistories")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vemo.Domain.Entities.Vehicles.VehiclePart", "VehiclePart")
                        .WithMany("VehiclePartMaintenanceHistories")
                        .HasForeignKey("VehiclePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");

                    b.Navigation("VehiclePart");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("UserAuthInfo");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.Vehicle", b =>
                {
                    b.Navigation("VehiclePartConditions");

                    b.Navigation("VehiclePartMaintenanceHistories");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.VehiclePart", b =>
                {
                    b.Navigation("VehiclePartConditions");

                    b.Navigation("VehiclePartMaintenanceHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
