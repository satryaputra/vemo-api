// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Vemo.Infrastructure.Persistence;

#nullable disable

namespace Vemo.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Vemo.Domain.Entities.Notifications.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Read")
                        .HasColumnType("boolean");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Users.UserAuthInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int?>("Otp")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("OtpExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserAuthInfos");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("PurchasingDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.VehiclePart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AgeInMonth")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("MaintenancePrice")
                        .HasColumnType("real");

                    b.Property<float>("MaintenanceServicePrice")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("VehicleType")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("VehicleParts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8d2201a-0be9-45a2-a2ab-8596286ad219"),
                            AgeInMonth = 4,
                            CreatedAt = new DateTime(2023, 12, 13, 14, 5, 18, 401, DateTimeKind.Utc).AddTicks(6861),
                            MaintenancePrice = 50000f,
                            MaintenanceServicePrice = 10000f,
                            Name = "Oli"
                        },
                        new
                        {
                            Id = new Guid("0bbc6d37-16db-4a84-8e65-3f8a9079b072"),
                            AgeInMonth = 10,
                            CreatedAt = new DateTime(2023, 12, 13, 14, 5, 18, 401, DateTimeKind.Utc).AddTicks(6875),
                            MaintenancePrice = 30000f,
                            MaintenanceServicePrice = 20000f,
                            Name = "Radiator"
                        },
                        new
                        {
                            Id = new Guid("054c38e2-a176-42a2-a6ed-b2ebceb0c67f"),
                            AgeInMonth = 6,
                            CreatedAt = new DateTime(2023, 12, 13, 14, 5, 18, 401, DateTimeKind.Utc).AddTicks(6878),
                            MaintenancePrice = 25000f,
                            MaintenanceServicePrice = 5000f,
                            Name = "Busi"
                        },
                        new
                        {
                            Id = new Guid("47647a64-2114-4781-83cf-73b9c56bd725"),
                            AgeInMonth = 5,
                            CreatedAt = new DateTime(2023, 12, 13, 14, 5, 18, 401, DateTimeKind.Utc).AddTicks(6880),
                            MaintenancePrice = 40000f,
                            MaintenanceServicePrice = 15000f,
                            Name = "Rem"
                        },
                        new
                        {
                            Id = new Guid("506b85f3-3fac-47ca-b31a-8be2e3c503e5"),
                            AgeInMonth = 24,
                            CreatedAt = new DateTime(2023, 12, 13, 14, 5, 18, 401, DateTimeKind.Utc).AddTicks(6881),
                            MaintenancePrice = 300000f,
                            MaintenanceServicePrice = 25000f,
                            Name = "Ban"
                        },
                        new
                        {
                            Id = new Guid("39272e95-acde-436c-aa59-bf9c3c947b8a"),
                            AgeInMonth = 3,
                            CreatedAt = new DateTime(2023, 12, 13, 14, 5, 18, 401, DateTimeKind.Utc).AddTicks(6886),
                            MaintenancePrice = 20000f,
                            MaintenanceServicePrice = 10000f,
                            Name = "Aki"
                        },
                        new
                        {
                            Id = new Guid("93998af9-57f8-43eb-82ce-e31eedee4973"),
                            AgeInMonth = 8,
                            CreatedAt = new DateTime(2023, 12, 13, 14, 5, 18, 401, DateTimeKind.Utc).AddTicks(6888),
                            MaintenancePrice = 60000f,
                            MaintenanceServicePrice = 20000f,
                            Name = "V-Belt",
                            VehicleType = "matic"
                        },
                        new
                        {
                            Id = new Guid("91ea877b-f36b-4447-9041-98c8f9d73aa0"),
                            AgeInMonth = 12,
                            CreatedAt = new DateTime(2023, 12, 13, 14, 5, 18, 401, DateTimeKind.Utc).AddTicks(6889),
                            MaintenancePrice = 100000f,
                            MaintenanceServicePrice = 20000f,
                            Name = "CVT",
                            VehicleType = "matic"
                        },
                        new
                        {
                            Id = new Guid("0cc92144-ffff-4ace-baf6-d9d47b54f0ec"),
                            AgeInMonth = 8,
                            CreatedAt = new DateTime(2023, 12, 13, 14, 5, 18, 401, DateTimeKind.Utc).AddTicks(6891),
                            MaintenancePrice = 100000f,
                            MaintenanceServicePrice = 20000f,
                            Name = "Rantai dan Gear",
                            VehicleType = "manual"
                        },
                        new
                        {
                            Id = new Guid("d03aa7c6-7e1c-4de7-87a7-af5e53a54ed0"),
                            AgeInMonth = 9,
                            CreatedAt = new DateTime(2023, 12, 13, 14, 5, 18, 401, DateTimeKind.Utc).AddTicks(6895),
                            MaintenancePrice = 100000f,
                            MaintenanceServicePrice = 20000f,
                            Name = "Kampas Kopling",
                            VehicleType = "manual"
                        });
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.VehiclePartCondition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastMaintenance")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("NextMaintenance")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehiclePartId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehiclePartId");

                    b.ToTable("VehiclePartConditions");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.VehiclePartMaintenanceHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("MaintenanceFinalPrice")
                        .HasColumnType("real");

                    b.Property<float>("MaintenanceServiceFinalPrice")
                        .HasColumnType("real");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VehiclePartId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehiclePartId");

                    b.ToTable("VehiclePartMaintenanceHistories");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Notifications.Notification", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Users.UserAuthInfo", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Users.User", "User")
                        .WithOne("UserAuthInfo")
                        .HasForeignKey("Vemo.Domain.Entities.Users.UserAuthInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.Vehicle", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Users.User", "User")
                        .WithMany("Vehicles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.VehiclePartCondition", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Vehicles.Vehicle", "Vehicle")
                        .WithMany("VehiclePartConditions")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vemo.Domain.Entities.Vehicles.VehiclePart", "VehiclePart")
                        .WithMany("VehiclePartConditions")
                        .HasForeignKey("VehiclePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");

                    b.Navigation("VehiclePart");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.VehiclePartMaintenanceHistory", b =>
                {
                    b.HasOne("Vemo.Domain.Entities.Vehicles.Vehicle", "Vehicle")
                        .WithMany("VehiclePartMaintenanceHistories")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Vemo.Domain.Entities.Vehicles.VehiclePart", "VehiclePart")
                        .WithMany("VehiclePartMaintenanceHistories")
                        .HasForeignKey("VehiclePartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");

                    b.Navigation("VehiclePart");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("UserAuthInfo");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.Vehicle", b =>
                {
                    b.Navigation("VehiclePartConditions");

                    b.Navigation("VehiclePartMaintenanceHistories");
                });

            modelBuilder.Entity("Vemo.Domain.Entities.Vehicles.VehiclePart", b =>
                {
                    b.Navigation("VehiclePartConditions");

                    b.Navigation("VehiclePartMaintenanceHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
